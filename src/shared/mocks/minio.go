// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	v7 "github.com/minio/minio-go/v7"
)

// Minio is an autogenerated mock type for the Minio type
type Minio struct {
	mock.Mock
}

// CreateBucket provides a mock function with given fields: ctx, bucketName
func (_m *Minio) CreateBucket(ctx context.Context, bucketName string) error {
	ret := _m.Called(ctx, bucketName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExternalHost provides a mock function with given fields:
func (_m *Minio) GetExternalHost() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetHost provides a mock function with given fields:
func (_m *Minio) GetHost() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsBucketExists provides a mock function with given fields: ctx, bucketName
func (_m *Minio) IsBucketExists(ctx context.Context, bucketName string) (bool, error) {
	ret := _m.Called(ctx, bucketName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, bucketName, fileName
func (_m *Minio) Read(ctx context.Context, bucketName string, fileName string) (io.Reader, error) {
	ret := _m.Called(ctx, bucketName, fileName)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.Reader); ok {
		r0 = rf(ctx, bucketName, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, path, bucketName, filename
func (_m *Minio) Upload(ctx context.Context, path string, bucketName string, filename string) (*v7.UploadInfo, error) {
	ret := _m.Called(ctx, path, bucketName, filename)

	var r0 *v7.UploadInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v7.UploadInfo); ok {
		r0 = rf(ctx, path, bucketName, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v7.UploadInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, path, bucketName, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBytes provides a mock function with given fields: ctx, bucketName, filename, bytesData, contentType
func (_m *Minio) UploadBytes(ctx context.Context, bucketName string, filename string, bytesData []byte, contentType string) (*v7.UploadInfo, error) {
	ret := _m.Called(ctx, bucketName, filename, bytesData, contentType)

	var r0 *v7.UploadInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, string) *v7.UploadInfo); ok {
		r0 = rf(ctx, bucketName, filename, bytesData, contentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v7.UploadInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte, string) error); ok {
		r1 = rf(ctx, bucketName, filename, bytesData, contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMinio interface {
	mock.TestingT
	Cleanup(func())
}

// NewMinio creates a new instance of Minio. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMinio(t mockConstructorTestingTNewMinio) *Minio {
	mock := &Minio{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
