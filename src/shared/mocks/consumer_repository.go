// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	consumer "github.com/muhammadandikakurniawan/xyz_multifinance/src/module/consumer/aggregate/consumer"

	mock "github.com/stretchr/testify/mock"
)

// ConsumerRepository is an autogenerated mock type for the ConsumerRepository type
type ConsumerRepository struct {
	mock.Mock
}

// FindRequestLoanByConsumerId provides a mock function with given fields: ctx, consumerId
func (_m *ConsumerRepository) FindRequestLoanByConsumerId(ctx context.Context, consumerId string) (*consumer.ConsumerAggregate, error) {
	ret := _m.Called(ctx, consumerId)

	var r0 *consumer.ConsumerAggregate
	if rf, ok := ret.Get(0).(func(context.Context, string) *consumer.ConsumerAggregate); ok {
		r0 = rf(ctx, consumerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*consumer.ConsumerAggregate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, consumerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTenorLimitByConsumerId provides a mock function with given fields: ctx, consumerId
func (_m *ConsumerRepository) FindTenorLimitByConsumerId(ctx context.Context, consumerId string) (*consumer.ConsumerAggregate, error) {
	ret := _m.Called(ctx, consumerId)

	var r0 *consumer.ConsumerAggregate
	if rf, ok := ret.Get(0).(func(context.Context, string) *consumer.ConsumerAggregate); ok {
		r0 = rf(ctx, consumerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*consumer.ConsumerAggregate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, consumerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, ag
func (_m *ConsumerRepository) Save(ctx context.Context, ag *consumer.ConsumerAggregate) error {
	ret := _m.Called(ctx, ag)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *consumer.ConsumerAggregate) error); ok {
		r0 = rf(ctx, ag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConsumerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumerRepository creates a new instance of ConsumerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumerRepository(t mockConstructorTestingTNewConsumerRepository) *ConsumerRepository {
	mock := &ConsumerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
