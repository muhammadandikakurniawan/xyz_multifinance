// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	abstraction "github.com/muhammadandikakurniawan/xyz_multifinance/src/shared/abstraction"
	mock "github.com/stretchr/testify/mock"
)

// Aggregate is an autogenerated mock type for the Aggregate type
type Aggregate struct {
	mock.Mock
}

// GetAggregate provides a mock function with given fields:
func (_m *Aggregate) GetAggregate() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetEvents provides a mock function with given fields:
func (_m *Aggregate) GetEvents() []abstraction.AggregateEvent {
	ret := _m.Called()

	var r0 []abstraction.AggregateEvent
	if rf, ok := ret.Get(0).(func() []abstraction.AggregateEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]abstraction.AggregateEvent)
		}
	}

	return r0
}

type mockConstructorTestingTNewAggregate interface {
	mock.TestingT
	Cleanup(func())
}

// NewAggregate creates a new instance of Aggregate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAggregate(t mockConstructorTestingTNewAggregate) *Aggregate {
	mock := &Aggregate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
