// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ModuleRegistry is an autogenerated mock type for the ModuleRegistry type
type ModuleRegistry struct {
	mock.Mock
}

// CallModule provides a mock function with given fields: path, ctx, param
func (_m *ModuleRegistry) CallModule(path string, ctx context.Context, param interface{}) (interface{}, error) {
	ret := _m.Called(path, ctx, param)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, context.Context, interface{}) interface{}); ok {
		r0 = rf(path, ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context, interface{}) error); ok {
		r1 = rf(path, ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterModule provides a mock function with given fields: path, actModule
func (_m *ModuleRegistry) RegisterModule(path string, actModule func(context.Context, interface{}) (interface{}, error)) {
	_m.Called(path, actModule)
}

type mockConstructorTestingTNewModuleRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewModuleRegistry creates a new instance of ModuleRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewModuleRegistry(t mockConstructorTestingTNewModuleRegistry) *ModuleRegistry {
	mock := &ModuleRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
