// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/muhammadandikakurniawan/xyz_multifinance/src/module/consumer/usecase/consumer/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/muhammadandikakurniawan/xyz_multifinance/src/shared/model"
)

// ConsumerUsecase is an autogenerated mock type for the ConsumerUsecase type
type ConsumerUsecase struct {
	mock.Mock
}

// AddTenorLimit provides a mock function with given fields: ctx, requestData
func (_m *ConsumerUsecase) AddTenorLimit(ctx context.Context, requestData dto.AddTenorLmitRequestDto) (model.BaseResponseModel[dto.AddTenorLmitRequestDto], error) {
	ret := _m.Called(ctx, requestData)

	var r0 model.BaseResponseModel[dto.AddTenorLmitRequestDto]
	if rf, ok := ret.Get(0).(func(context.Context, dto.AddTenorLmitRequestDto) model.BaseResponseModel[dto.AddTenorLmitRequestDto]); ok {
		r0 = rf(ctx, requestData)
	} else {
		r0 = ret.Get(0).(model.BaseResponseModel[dto.AddTenorLmitRequestDto])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.AddTenorLmitRequestDto) error); ok {
		r1 = rf(ctx, requestData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApproveRequestLoan provides a mock function with given fields: ctx, requestData
func (_m *ConsumerUsecase) ApproveRequestLoan(ctx context.Context, requestData dto.ApprovalResponseDataDto) (model.BaseResponseModel[dto.ApprovalResponseDataDto], error) {
	ret := _m.Called(ctx, requestData)

	var r0 model.BaseResponseModel[dto.ApprovalResponseDataDto]
	if rf, ok := ret.Get(0).(func(context.Context, dto.ApprovalResponseDataDto) model.BaseResponseModel[dto.ApprovalResponseDataDto]); ok {
		r0 = rf(ctx, requestData)
	} else {
		r0 = ret.Get(0).(model.BaseResponseModel[dto.ApprovalResponseDataDto])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ApprovalResponseDataDto) error); ok {
		r1 = rf(ctx, requestData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsumer provides a mock function with given fields: ctx, consumerId
func (_m *ConsumerUsecase) GetConsumer(ctx context.Context, consumerId string) (model.BaseResponseModel[*dto.ConsumerDto], error) {
	ret := _m.Called(ctx, consumerId)

	var r0 model.BaseResponseModel[*dto.ConsumerDto]
	if rf, ok := ret.Get(0).(func(context.Context, string) model.BaseResponseModel[*dto.ConsumerDto]); ok {
		r0 = rf(ctx, consumerId)
	} else {
		r0 = ret.Get(0).(model.BaseResponseModel[*dto.ConsumerDto])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, consumerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListRequestLoan provides a mock function with given fields: ctx, requestData
func (_m *ConsumerUsecase) GetListRequestLoan(ctx context.Context, requestData dto.GetListRequestLoanRequestDto) (model.BaseResponseModel[[]dto.RequestLoanDto], error) {
	ret := _m.Called(ctx, requestData)

	var r0 model.BaseResponseModel[[]dto.RequestLoanDto]
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetListRequestLoanRequestDto) model.BaseResponseModel[[]dto.RequestLoanDto]); ok {
		r0 = rf(ctx, requestData)
	} else {
		r0 = ret.Get(0).(model.BaseResponseModel[[]dto.RequestLoanDto])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.GetListRequestLoanRequestDto) error); ok {
		r1 = rf(ctx, requestData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, requestData
func (_m *ConsumerUsecase) Register(ctx context.Context, requestData dto.RequestCreateNewConsumerDto) (model.BaseResponseModel[dto.ConsumerId], error) {
	ret := _m.Called(ctx, requestData)

	var r0 model.BaseResponseModel[dto.ConsumerId]
	if rf, ok := ret.Get(0).(func(context.Context, dto.RequestCreateNewConsumerDto) model.BaseResponseModel[dto.ConsumerId]); ok {
		r0 = rf(ctx, requestData)
	} else {
		r0 = ret.Get(0).(model.BaseResponseModel[dto.ConsumerId])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.RequestCreateNewConsumerDto) error); ok {
		r1 = rf(ctx, requestData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestLoan provides a mock function with given fields: ctx, requestData
func (_m *ConsumerUsecase) RequestLoan(ctx context.Context, requestData dto.RequestLoanDto) (model.BaseResponseModel[dto.RequestLoanDto], error) {
	ret := _m.Called(ctx, requestData)

	var r0 model.BaseResponseModel[dto.RequestLoanDto]
	if rf, ok := ret.Get(0).(func(context.Context, dto.RequestLoanDto) model.BaseResponseModel[dto.RequestLoanDto]); ok {
		r0 = rf(ctx, requestData)
	} else {
		r0 = ret.Get(0).(model.BaseResponseModel[dto.RequestLoanDto])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.RequestLoanDto) error); ok {
		r1 = rf(ctx, requestData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConsumerUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumerUsecase creates a new instance of ConsumerUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumerUsecase(t mockConstructorTestingTNewConsumerUsecase) *ConsumerUsecase {
	mock := &ConsumerUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
